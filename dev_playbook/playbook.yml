---
- hosts: dev
  become: true
  become_method: sudo

  # before running, make sure you install the prereq roles with:
  # ansible-galaxy install --roles-path=roles --role-file=prereq_roles.yml --force
  #
  # then run with something like:
  # ANSIBLE_CONFIG='./ansible.cfg' ANSIBLE_INVENTORY='./inventory.ini' ansible-playbook playbook.yml

  pre_tasks:
    - include_tasks: tasks/system-dependencies-rhel.yml
      when: (ansible_pkg_mgr == "yum" or ansible_pkg_mgr == "dnf") and (ansible_distribution == "Rocky" or ansible_distribution == "RedHat" or ansible_distribution == "CentOS" or ansible_distribution == "OracleLinux")
    - include_tasks: "tasks/system-dependencies-ubuntu.yml"
      when: ansible_pkg_mgr == "apt" and ansible_distribution == "Ubuntu"

  roles:
    - role: staticdev.pyenv
      vars:
        pyenv_env: user
        pyenv_path: "/home/vagrant/.pyenv"
        pyenv_owner: vagrant
        pyenv_owner_group: vagrant
        pyenv_python_versions:
          - "3.10.12"
        pyenv_global:
          - "3.10.12"
        pyenv_shellrc_file: "/home/vagrant/.bashrc"
    - role: zzet.rbenv
      vars:
        rbenv:
          env: user
          version: v1.2.0
          default_ruby: 3.2.2
          rubies:
            - version: 2.7.8
            - version: 3.0.6
            - version: 3.1.4
            - version: 3.2.2
            - version: 3.3.0
        rbenv_users:
          - vagrant
        rbenv_plugins:
          - { name: "ruby-build",         repo: "https://github.com/rbenv/ruby-build.git",         version: "master" }
          - { name: "rbenv-installer",    repo: "https://github.com/rbenv/rbenv-installer.git",    version: "main" }
          - { name: "rbenv-update",       repo: "https://github.com/rkh/rbenv-update.git",         version: "master" }
        rbenv_clean_up: false

    # - role: geerlingguy.memcached
    # - role: geerlingguy.redis
    # # would like to use ANXS.postgresql role, but their latest version in ansible-galaxy is outdated.
    # # roles/sd.postgresql is our own extract of their repository...seems to work.
    # - role: sd.postgresql
    #   postgresql_users:
    #     - name: vagrant
    #       pass: vagrant
    #       encrypted: yes
    #       state: present
    #   postgresql_user_privileges:
    #     - name: vagrant
    #       role_attr_flags: SUPERUSER

    # vagrant-user-only nvm for managing node(i can't make it work system-wide...not gonna fight it.)
    - role: stephdewit.nvm
      vars:
        nvm:
          node_version: "18.6.0"
          install_for: vagrant
          install_info: "/home/vagrant/.nvm"
        nvm_version: latest
        nvm_node_version: "18.6.0"
        nvm_install_path: "/home/vagrant/.nvm"
        nvm_shell_init_file: "/home/vagrant/.bashrc"
        environment:
          NVM_DIR: "/home/vagrant/.nvm"

  tasks:
    - include_tasks: 'tasks/nvm.yml'

    - include_tasks: 'tasks/git-bash-prompt.yml'



